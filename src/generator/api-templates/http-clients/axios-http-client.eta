<%
const { apiConfig, generateResponses, config } = it;
%>

import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse, ResponseType } from "axios";

export type QueryParamsType = Record<string | number, any>;

export interface FullRequestParams extends Omit<AxiosRequestConfig, "data" | "params" | "url" | "responseType"> {
  /** set parameter to `true` for call `securityWorker` for this request */
  secure?: boolean;
  /** request path */
  url: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  params?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  ResponseType?: ResponseType;
  /** request body */
  body?: unknown;
}

export type RequestParams = Omit<FullRequestParams, "body" | "method" | "query" | "path">;

export interface ApiConfig<SecurityDataType = unknown> extends Omit<AxiosRequestConfig, "data" | "cancelToken"> {
  securityWorker?: (securityData: SecurityDataType | null) => Promise<AxiosRequestConfig | void> | AxiosRequestConfig | void;
  secure?: boolean;
  ResponseType?: ResponseType;
}

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
}

export class HttpClient {
    public instance: AxiosInstance; 

    constructor(axiosConfig: AxiosRequestConfig) {
        this.instance = axios.create(axiosConfig)
    }
 
    public request = async <T = any, _E = any>(config
<% if (config.unwrapResponseData) { %>
    : AxiosRequestConfig): Promise<T> => {
<% } else { %>
    : AxiosRequestConfig): Promise<AxiosResponse<T>> => {
<% } %>

        return this.instance.request(
            config
<% if (config.unwrapResponseData) { %>
        ).then(response => response.data);
<% } else { %>
        );
<% } %>
    };
}
